# -*- coding: utf-8 -*-
"""Aula_19

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p1WjaIXkaNSbHrHzoucchGKQZq49Iw28

BIBLIOTECAS E PROJETO RELÓGIO

DESENVOLVIMENTO DE PROJETOS:

**Etapas gerais para criar um projeto em Python:**

1. **Definir o Escopo do Projeto:**
Comece definindo claramente o que o seu projeto deve realizar. Quais são os objetivos e as funcionalidades que você deseja implementar? Isso ajudará a estabelecer um plano sólido para o seu projeto.
2. **Escolher um Ambiente de Desenvolvimento:**
Decida qual ambiente de desenvolvimento você usará para escrever, testar e executar seu código Python. Alguns ambientes populares incluem o IDLE, VSCode, PyCharm e Jupyter Notebook. Certifique-se de ter o Python instalado no seu sistema.
3. **Criar um Diretório para o Projeto:**
Crie uma pasta (diretório) para o seu projeto. Isso ajudará a manter seus arquivos organizados. Você pode usar o terminal ou um gerenciador de arquivos para criar essa pasta.

1. **Instalar Dependências (Bibliotecas):**
Se o seu projeto depende de bibliotecas externas, você pode usar o `pip` (gerenciador de pacotes do Python) para instalá-las.
2. **Escrever o Código Python:**
Agora você pode começar a escrever o código do seu projeto. Use um editor de código ou ambiente de desenvolvimento para criar seus arquivos Python. Certifique-se de seguir as melhores práticas de codificação, como comentar o código e organizar o projeto em módulos.
3. **Testar o Código:**
À medida que você escreve o código, faça testes frequentes para garantir que ele está funcionando conforme o esperado. Use ferramentas de teste como o módulo `unittest` ou bibliotecas de teste de terceiros, como `pytest`.
4. **Documentar o Projeto:**
Documente seu código para torná-lo mais legível para você e para outros desenvolvedores. Use docstrings para descrever funções e classes e inclua um arquivo README com informações sobre o projeto e como usá-lo.
5. **Gerenciar o Controle de Versão (Opcional):**
É uma boa prática usar um sistema de controle de versão, como Git, para acompanhar as mudanças em seu código. Isso facilita a colaboração com outros desenvolvedores e o gerenciamento


### **BIBLIOTECAS EM PYTHON:**
Python possui uma vasta coleção de bibliotecas para realizar uma ampla variedade de tarefas. Aqui estão algumas bibliotecas populares e úteis em Python, agrupadas por categorias:

**Manipulação de Dados:**

1. NumPy - Para computação numérica eficiente.
2. pandas - Para manipulação e análise de dados tabulares.
3. Matplotlib - Para criação de gráficos e visualização de dados.
4. Seaborn - Para visualização de dados estatísticos.
5. scikit-learn - Para aprendizado de máquina e aprendizado profundo.
6.

**Desenvolvimento Web:**
6. Flask - Para construir aplicativos web leves e rápidos.
7. Django - Para desenvolvimento web completo e robusto.
8. FastAPI - Para criação de APIs RESTful de maneira rápida e fácil.

**Processamento de Texto e Linguagem Natural:**
9. NLTK (Natural Language Toolkit) - Para processamento de linguagem natural.
10. spaCy - Uma biblioteca NLP moderna e eficiente.
11. TextBlob - Para tarefas de processamento de texto, como análise de sentimentos.

**Inteligência Artificial e Aprendizado de Máquina:**
12. TensorFlow - Uma biblioteca popular para aprendizado de máquina e aprendizado profundo.
13. PyTorch - Uma estrutura de aprendizado profundo amplamente usada.
14. Keras - Uma API de alto nível para construir redes neurais.
15. OpenAI Gym - Para desenvolver e comparar algoritmos de aprendizado por reforço.

**Manipulação de Imagem e Visão Computacional:**
16. OpenCV - Uma biblioteca de visão computacional para processamento de imagem.
17. Pillow - Para manipulação de imagens (similar ao PIL - Python Imaging Library).

**Manipulação de Datas e Horas:**
18. datetime - Biblioteca padrão para trabalhar com datas e horas.
19. arrow - Uma biblioteca para manipulação de datas e horas mais amigável.
**Bancos de Dados:**
20. SQLAlchemy - Para acesso e manipulação de bancos de dados relacionais.
21. pymongo - Para interagir com bancos de dados MongoDB.
22. SQLite - Biblioteca embutida para bancos de dados SQLite.

**Redes e Comunicação:**
23. requests - Para fazer requisições HTTP.
24. Twisted - Para programação de rede assíncrona.
25. socket - Biblioteca padrão para programação de rede em baixo nível.

**Interface Gráfica de Usuário (GUI):**
26. tkinter - Biblioteca padrão para criação de interfaces gráficas.
27. PyQt e PySide - Bibliotecas para criação de interfaces gráficas com Qt.
28. Kivy - Para criar aplicativos multiplataforma com interfaces sensíveis ao toque.

**Outros:**
29. os - Biblioteca padrão para operações de sistema e arquivos.
30. math - Biblioteca padrão para funções matemáticas.
31. random - Biblioteca padrão para geração de números aleatórios.
**Esta lista é apenas uma amostra das muitas bibliotecas disponíveis em Python. A escolha da biblioteca dependerá do seu projeto e das tarefas que você deseja realizar. Você pode instalar a maioria das bibliotecas usando ferramentas como `pip` ou `conda`, dependendo do ambiente de desenvolvimento que estiver usando.**

ALGUNS PACOTES NÃO PRECISAM INSTALAR, OUTROS PRECISAM, ISSO DEVIDO AO FATO DE ALGUNS JÁ ESTAREM PRESENTES NO PACOTE DE TECNOLOGIA DA LINGUAGEM.
"""

O tkinter é uma biblioteca de interface gráfica de usuário
(GUI) padrão para Python. Seu nome é uma abreviação de "Tk Interface,"
referindo-se ao kit de ferramentas Tk, que é a base dessa biblioteca. O `tkinter`
fornece uma maneira simples e eficaz de criar interfaces gráficas para aplicativos
Python em diferentes sistemas operacionais, como Windows, macOS e Linux.

Aqui estão algumas características e informações importantes sobre o `tkinter`:

1. **Biblioteca Padrão:** O `tkinter` é uma biblioteca padrão do Python,
o que significa que ela está incluída na instalação padrão do Python.
Você não precisa instalá-la separadamente.

2. **Multiplataforma:** O `tkinter` é multiplataforma e oferece uma aparência
nativa em diferentes sistemas operacionais. Isso significa que as interfaces
gráficas criadas com `tkinter` têm uma aparência e comportamento consistentes
em várias plataformas.

3. **Widgets e Elementos de Interface:** O `tkinter` fornece uma variedade de
widgets e elementos de interface gráfica, como botões, rótulos, caixas de texto,
caixas de seleção, barras de rolagem e muito mais, que podem ser usados para criar
a interface do seu aplicativo.

4. **Eventos e Callbacks:** O `tkinter` permite que você associe eventos, como
cliques de mouse e pressionamentos de tecla, a funções específicas (callbacks)
para lidar com interações do usuário.

5. **Geometria de Layout:** O `tkinter` fornece gerenciadores de geometria,
como `pack`, `grid` e `place`, para organizar e posicionar elementos na janela
da interface gráfica.

6. **Simplicidade e Facilidade de Uso:** O `tkinter` é conhecido por sua
simplicidade e facilidade de uso, o que o torna uma escolha popular para criar
interfaces gráficas para aplicativos desktop simples.

Aqui está um exemplo básico de um programa `tkinter` que cria uma janela simples:


import tkinter as tk

janela = tk.Tk()
janela.title("Minha Janela tkinter")
janela.geometry("400x200")

label = tk.Label(janela, text="Olá, tkinter!")
label.pack()

janela.mainloop()


Este é apenas um exemplo simples para mostrar a criação de uma janela `
tkinter`. Você pode criar interfaces gráficas mais complexas e interativas
usando a biblioteca `tkinter` para atender às necessidades do seu projeto.

from tkinter import *  # importando a Biblioteca

janela = Tk()   # função principal
janela.geometry('1200x600')
janela.mainloop()

from tkinter import *
from tkinter import ttk
root = Tk()
frm = ttk.Frame(root, padding=10)
frm.grid()
ttk.Label(frm, text="Hello World!").grid(column=0, row=0)
ttk.Button(frm, text="Quit", command=root.destroy).grid(column=1, row=0)
root.mainloop()

import datetime
data_atual = datetime.now()
print(data_atual)

from datetime import datetime
# criar uma data

hoje = datetime.now()
print(hoje.)

from tkinter import *

windown = Tk()
windown.geometry('500x200')
windown.title('Isso é uma Janela')
label = Label(windown, text=('olá mundo'))
label.configure(justify='center')
label.pack()
windown.configure(borderwidth='5')
windown.configure(bg='yellow')
btn = Button(text='clique aqui')
btn.pack()
btn.configure(width=10)
btn.configure(border=5)
btn.configure(font='Arial')
btn.place(x=200, y=100)

windown.mainloop()

import tkinter as tk
import time

def atualizar_relogio():
  hora_atual = time.strftime('%H:%M:%S:')
  relogio.config(text = hora_atual)
  janela.after(1000, atualizar_relogio)

janela = tk.Tk()
janela.title('RELOGIO')
relogio = tk.Label(janela, font=('Arial', 48))
relogio.pack()

atualizar_relogio()
janela.mainloop()

#está correto